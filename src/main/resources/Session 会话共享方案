第一种、是使用容器扩展插件来实现，比如基于 Tomcat 的 tomcat-redis-session-manager 插件，基于 Jetty 的 jetty-session-redis 插件、memcached-session-manager插件。
这个方案的好处是对项目来说是透明的，无需改动代码，但是由于过于依赖容器，一旦容器升级或者更换意味着又得重新配置。而且其底层是，复制 session 到其它服务器，所以会有一定的延迟，也不能部署太多的服务器。

第二种、是使用 Nginx 负载均衡的 ip_hash 策略实现用户每次访问都绑定到同一台具体的后台 tomcat 服务器实现 session 总是存在。
这种方案的局限性是ip不能变，如果手机从北京跳到河北，那么ip会发生变化；另外负载均衡的时候，如果某一台服务器发生故障，那么会重新定位，也会跳转到别的机器。

第三种、是自己写一套 Session 会话管理的工具类，在需要使用会话的时候都从自己的工具类中获取，而工具类后端存储可以放到 Redis 中。
这个方案灵活性很好，但开发需要一些额外的时间。

第四种、是使用框架的会话管理工具，也就是我们要介绍的 Spring session。
这个方案既不依赖 tomcat 容器，又不需要改动代码，由Spring session框架为我们提供，可以说是目前非常完美的session共享解决方案 。
